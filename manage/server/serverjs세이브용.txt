const express = require('express');
const bodyParser = require('body-parser');
const mariadb = require('mariadb');
const app = express();
const port = 3000;
const config = require('./DBconfig.json');

// JSON 파싱을 위한 미들웨어 추가
app.use(bodyParser.json());


const dbConfig = mariadb.createPool({
  host: config.db.host,
  user: config.db.user,
  password: config.db.password,
  database: config.db.database,
});
// MariaDB 연결 정보
/*
const dbConfig = {
  host: 'SEHWANCOM',
  user: 'manager', // MariaDB 사용자 이름에 맞게 수정
  password: 'manager', // MariaDB 암호에 맞게 수정
  database: 'kiosk', // 사용할 데이터베이스 이름에 맞게 수정
};*/

// 태그 목록 조회
app.get('/tags', async (req, res) => {
  try {
    // MariaDB 연결
    const connection = await mariadb.createConnection(dbConfig);
    
    // 쿼리 실행
    const rows = await connection.query('SELECT * FROM product');

    // 연결 종료
    await connection.end();

    // 쿼리 결과 반환
    res.json(rows);
    console.log('데이터 반환 성공');
  } catch (error) {
    console.error('태그 목록 조회 중 오류 발생:', error);
    res.status(500).send('태그 목록 조회 중 오류가 발생했습니다.');
  }
});

// 태그 추가
app.post('/addTag', async (req, res) => {
  console.log('앙 추가띠')
});

//Category 관리 페이지에서 
app.post('/applyChanges', async (req, res) => {
  /*
  try {
    const modifiedCategoryData = req.body; // 변경된 데이터를 받음

    // MariaDB 연결
    const connection = await mariadb.createConnection(dbConfig);

    // 변경사항을 데이터베이스에 적용
    for (const newData of modifiedCategoryData) {
      // 기존 데이터와 비교하여 수정된 부분을 감지하고 SQL 코드를 작성
      const existingData = CategoryData.find(data => data.id === newData.id);
      if (existingData && existingData.name !== newData.name) {
        // 이름이 변경된 경우 UPDATE 쿼리 실행
        await connection.query('UPDATE category SET name = ? WHERE id = ?', [newData.name, newData.id]);
      }
      // 다른 변경사항에 대한 로직 추가 (추가, 삭제 등)
    }

    // 연결 종료
    await connection.end();

    // 성공 응답
    res.send('변경사항이 성공적으로 적용되었습니다.');
  } catch (error) {
    console.error('변경사항 적용 중 오류 발생:', error);
    res.status(500).send('변경사항 적용 중 오류가 발생했습니다.');
  }
  */
});

// 서버 실행
app.listen(port, () => {
  console.log(`서버가 http://localhost:${port} 에서 실행 중입니다.`);
});
